1.Create a database named Employee. Create a collection named empDetails
You can use any of the fields Name, Age ,e_mail, phone,salary
 
use employ
switched to db employ

> db.createCollection("Empdetails");
{ "ok" : 1 }

i) Insert 5 documents in it using the different insert() methods 

> db.Empdetails.insert({name:"Bhuvan",age:30,email:"bhuvan@gps.com",salary:5000})
WriteResult({ "nInserted" : 1 })
> db.Empdetails.insert({name:"Mohan",age:32,email:"mohan@gps.com",salary:4000})
WriteResult({ "nInserted" : 1 })
> db.Empdetails.insert({name:"Raju",age:29,email:"raju@gps.com",salary:6000})
WriteResult({ "nInserted" : 1 })
> db.Empdetails.insert({name:"Manu",age:29,email:"manu@gps.com",salary:5500})
WriteResult({ "nInserted" : 1 })
> db.Empdetails.insert({name:"Ram",age:31,email:"ram@gps.com",salary:4500})
WriteResult({ "nInserted" : 1 })

> db.Empdetails.find();
{ "_id" : ObjectId("629b209466e10959ee3cc88c"), "name" : "Bhuvan", "age" : 30, "email" : "bhuvan@gps.com", "salary" : 5000 }
{ "_id" : ObjectId("629b20b766e10959ee3cc88d"), "name" : "Mohan", "age" : 32, "email" : "mohan@gps.com", "salary" : 4000 }
{ "_id" : ObjectId("629b20d166e10959ee3cc88e"), "name" : "Raju", "age" : 29, "email" : "raju@gps.com", "salary" : 6000 }
{ "_id" : ObjectId("629b20e766e10959ee3cc88f"), "name" : "Manu", "age" : 29, "email" : "manu@gps.com", "salary" : 5500 }
{ "_id" : ObjectId("629b210266e10959ee3cc890"), "name" : "Ram", "age" : 31, "email" : "ram@gps.com", "salary" : 4500 }

a) Find the details of employee whose name is mohan

> db.Empdetails.find({"name":"Mohan"});
{ "_id" : ObjectId("629b20b766e10959ee3cc88d"), "name" : "Mohan", "age" : 32, "email" : "mohan@gps.com", "salary" : 4000 }

b) Fetch the documents of employees whose salary >=5000

> db.Empdetails.find({"salary":{$gte:5000}}).pretty()
{
        "_id" : ObjectId("629b209466e10959ee3cc88c"),
        "name" : "Bhuvan",
        "age" : 30,
        "email" : "bhuvan@gps.com",
        "salary" : 5000
}
{
        "_id" : ObjectId("629b20d166e10959ee3cc88e"),
        "name" : "Raju",
        "age" : 29,
        "email" : "raju@gps.com",
        "salary" : 6000
}
{
        "_id" : ObjectId("629b20e766e10959ee3cc88f"),
        "name" : "Manu",
        "age" : 29,
        "email" : "manu@gps.com",
        "salary" : 5500


c) Find the documents of employees whose name starts with letter r

> db.Empdetails.findOne({"name":/^R/})
{
        "_id" : ObjectId("629b20d166e10959ee3cc88e"),
        "name" : "Raju",
        "age" : 29,
        "email" : "raju@gps.com",
        "salary" : 6000

> db.Empdetails.find({"name":/^R|^M/})
{ "_id" : ObjectId("629b20b766e10959ee3cc88d"), "name" : "Mohan", "age" : 32, "email" : "mohan@gps.com", "salary" : 4000 }
{ "_id" : ObjectId("629b20d166e10959ee3cc88e"), "name" : "Raju", "age" : 29, "email" : "raju@gps.com", "salary" : 6000 }
{ "_id" : ObjectId("629b20e766e10959ee3cc88f"), "name" : "Manu", "age" : 29, "email" : "manu@gps.com", "salary" : 5500 }
{ "_id" : ObjectId("629b210266e10959ee3cc890"), "name" : "Ram", "age" : 31, "email" : "ram@gps.com", "salary" : 4500 }

d) Find the documents of employees whose name is not in mohan , raju, bhuvan

> db.Empdetails.find({"name":{$in:["Mohan","Raju","Bhuvan"]}})
{ "_id" : ObjectId("629b209466e10959ee3cc88c"), "name" : "Bhuvan", "age" : 30, "email" : "bhuvan@gps.com", "salary" : 5000 }
{ "_id" : ObjectId("629b20b766e10959ee3cc88d"), "name" : "Mohan", "age" : 32, "email" : "mohan@gps.com", "salary" : 4000 }
{ "_id" : ObjectId("629b20d166e10959ee3cc88e"), "name" : "Raju", "age" : 29, "email" : "raju@gps.com", "salary" : 6000 }

e) Find the documents of employees whose names are mohan , raju, bhuvan

> db.Empdetails.find({"name":{$nin:["Mohan","Raju","Bhuvan"]}})
{ "_id" : ObjectId("629b20e766e10959ee3cc88f"), "name" : "Manu", "age" : 29, "email" : "manu@gps.com", "salary" : 5500 }
{ "_id" : ObjectId("629b210266e10959ee3cc890"), "name" : "Ram", "age" : 31, "email" : "ram@gps.com", "salary" : 4500 }

f) Retrieve the details of employees whose age is less than 30. Display only the fields name, salary 

> db.Empdetails.find({age:{$lt:30}},{name:1,salary:1})
{ "_id" : ObjectId("629b20d166e10959ee3cc88e"), "name" : "Raju", "salary" : 6000 }
{ "_id" : ObjectId("629b20e766e10959ee3cc88f"), "name" : "Manu", "salary" : 5500 }

g) Find the details of employees whose salary is >5000 and age is < 30

> db.Empdetails.find({$and:[{age:{$lt:30}},{salary:{$gt:5000}}]});
{ "_id" : ObjectId("629b20d166e10959ee3cc88e"), "name" : "Raju", "age" : 29, "email" : "raju@gps.com", "salary" : 6000 }
{ "_id" : ObjectId("629b20e766e10959ee3cc88f"), "name" : "Manu", "age" : 29, "email" : "manu@gps.com", "salary" : 5500 }

h) Update the e-mail of employee whose name is mohan // findOneAndUpdate()

> db.Empdetails.update({name:"Mohan"},{$set:{email:"neil@gps.com"}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.Empdetails.findOneAndUpdate({name:"Mohan"},{$set:{email:"neil@gps.com"}});
{
        "_id" : ObjectId("629b20b766e10959ee3cc88d"),
        "name" : "Mohan",
        "age" : 32,
        "email" : "neil@gps.com",
        "salary" : 4000
}

i) Delete all the documents of employees whose age>56

> db.Empdetails.deleteMany({age:{$gt:56}});
{ "acknowledged" : true, "deletedCount" : 0 }
> db.Empdetails.update({name:"Mohan"},{$set:{age:57}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.Empdetails.deleteMany({age:{$gt:56}});
{ "acknowledged" : true, "deletedCount" : 1 }